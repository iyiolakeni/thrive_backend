{"version":3,"file":"business.service.js","sourceRoot":"","sources":["../../../src/business/business.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAAkF;AAClF,6CAAmD;AACnD,iFAAwE;AAExE,qCAAqC;AAK9B,IAAM,eAAe,GAArB,MAAM,eAAe;IACxB,YAEY,YAAkC;QAAlC,iBAAY,GAAZ,YAAY,CAAsB;IAC5C,CAAC;IAEH,KAAK,CAAC,MAAM,CAAC,iBAAoC;QAC7C,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;YACrD,KAAK,EAAE,EAAC,YAAY,EAAE,iBAAiB,CAAC,YAAY,EAAC;SACxD,CAAC,CAAC;QAEH,IAAI,gBAAgB,EAAC,CAAC;YAClB,MAAM,IAAI,0BAAiB,CAAC,4DAA4D,CAAC,CAAC;QAC9F,CAAC;QACD,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QAC7D,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC5C,CAAC;IAED,cAAc;QACV,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;IACpC,CAAC;IAED,WAAW,CAAC,YAAoB;QAC5B,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,EAAC,YAAY,EAAC,CAAC,CAAA;IACtD,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,IAAY,EAAE,iBAAoC;QAGnE,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAC,KAAK,EAAC,EAAC,YAAY,EAAE,IAAI,EAAC,EAAC,CAAC,CAAC;QAC/E,IAAI,CAAC,QAAQ,EAAC,CAAC;YACX,MAAM,IAAI,0BAAiB,CAAC,sBAAsB,IAAI,YAAY,CAAC,CAAC;QACxE,CAAC;QACD,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;QAC3C,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,YAAoB;QACrC,MAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;IAClD,CAAC;CACJ,CAAA;AAxCY,0CAAe;0BAAf,eAAe;IAD3B,IAAA,mBAAU,GAAE;IAGJ,WAAA,IAAA,0BAAgB,EAAC,0BAAQ,CAAC,CAAA;qCACL,oBAAU;GAH3B,eAAe,CAwC3B","sourcesContent":["import { ConflictException, Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Business } from 'src/entities/business.entity/business.entity';\r\nimport { User } from 'src/entities/user.entity/user.entity';\r\nimport { Repository } from 'typeorm';\r\nimport { CreateBusinessDto } from './dto/create-business.dto/create-business.dto';\r\nimport { UpdateBusinessDto } from './dto/update-business.dto/update-business.dto';\r\n\r\n@Injectable()\r\nexport class BusinessService {\r\n    constructor(\r\n        @InjectRepository(Business)\r\n        private businessRepo: Repository<Business>\r\n    ){}\r\n\r\n    async create(createBusinessDto: CreateBusinessDto): Promise<Business>{\r\n        const existingBusiness = await this.businessRepo.findOne({\r\n            where: {businessName: createBusinessDto.businessName}\r\n        });\r\n\r\n        if (existingBusiness){\r\n            throw new ConflictException('Business Already Exist, try another user or reset password');\r\n        }\r\n        const business = this.businessRepo.create(createBusinessDto);\r\n        return this.businessRepo.save(business);\r\n    }\r\n\r\n    getAllBusiness(): Promise<Business[]>{\r\n        return this.businessRepo.find();\r\n    }\r\n\r\n    getBusiness(businessName: string): Promise<Business>{\r\n        return this.businessRepo.findOneBy({businessName})\r\n    }\r\n\r\n    async updateBusiness(name: string, updateBusinessdto: UpdateBusinessDto): Promise<Business>{\r\n        // await this.businessRepo.update(name, updateBusinessdto);\r\n        // return this.businessRepo.findOneBy({}) \r\n        const business = await this.businessRepo.findOne({where:{businessName: name}});\r\n        if (!business){\r\n            throw new NotFoundException(`Business with name ${name} not found`);\r\n        }\r\n        Object.assign(business, updateBusinessdto);\r\n        return this.businessRepo.save(business);\r\n    }\r\n\r\n    async deleteBusiness(businessName: string): Promise<void>{\r\n        await  this.businessRepo.delete(businessName);\r\n    }\r\n}\r\n"]}