{"version":3,"file":"user.service.js","sourceRoot":"","sources":["../../../src/user/user.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { User } from \"src/entities/user.entity/user.entity\";\r\nimport { Repository } from \"typeorm\";\r\nimport { CreateUserDto } from \"./dto/create-user.dto/create-user.dto\";\r\nimport { UpdateUserDto } from \"./dto/update-user.dto/update-user.dto\";\r\nimport * as bcrypt from \"bcrypt\";\r\nimport * as crypto from \"crypto\";\r\nimport {\r\n\tConflictResponse,\r\n\tDataResponse,\r\n\tErrorResponse,\r\n\tInvalidCredentialsResponse,\r\n\tNotFoundResponse,\r\n\tSearchResponse,\r\n\tSuccessResponse,\r\n} from \"src/models/response.dto\";\r\nimport { Injectable, Logger } from \"@nestjs/common\";\r\nimport { PasswordRest } from \"src/entities/user.entity/password.entity\";\r\nimport { getuid } from \"process\";\r\nimport { EmailService } from \"src/email/email.service\";\r\nimport { ResetPasswordDto } from \"./dto/reset_password.dto\";\r\nimport { UserResponse } from \"src/models/userResponse.dto\";\r\nimport { SearchFilterDto } from \"src/product-categories/dto/search-filter.dto\";\r\n\r\n@Injectable()\r\nexport class UserService {\r\n\tprivate readonly logger = new Logger(UserService.name);\r\n\tprivate readonly secret: Buffer;\r\n\tprivate readonly url = process.env.FRONT_END_URL;\r\n\r\n\tconstructor(\r\n\t\t@InjectRepository(User)\r\n\t\tprivate userRepo: Repository<User>,\r\n\t\t@InjectRepository(PasswordRest)\r\n\t\tprivate passwordResetRepo: Repository<PasswordRest>,\r\n\t\tprivate emailService: EmailService\r\n\t) {\r\n\t\tthis.secret = Buffer.from(process.env.SECRET_KEY, \"hex\");\r\n\t}\r\n\r\n\tasync findOneByEmail(email: string): Promise<User | undefined> {\r\n\t\treturn this.userRepo.findOneBy({ email });\r\n\t}\r\n\r\n\tasync create(\r\n\t\tcreateUserDto: CreateUserDto\r\n\t): Promise<User | ErrorResponse | SuccessResponse> {\r\n\t\tconst existingUser = await this.userRepo.findOne({\r\n\t\t\twhere: { username: createUserDto.username },\r\n\t\t});\r\n\r\n\t\t//Check if user is under 18 years old\r\n\t\tconsole.log(\"User's date of birth: \", createUserDto.dob);\r\n\r\n\t\t// Convert dob to Date object if it's a string\r\n\t\tconst dobDate =\r\n\t\t\tcreateUserDto.dob instanceof Date\r\n\t\t\t\t? createUserDto.dob\r\n\t\t\t\t: new Date(createUserDto.dob);\r\n\r\n\t\t// Calculate date 18 years ago\r\n\t\tconst eighteenYearsAgo = new Date();\r\n\t\teighteenYearsAgo.setFullYear(eighteenYearsAgo.getFullYear() - 18);\r\n\r\n\t\tconsole.log(\"Current date minus 18 years: \", eighteenYearsAgo);\r\n\t\tconsole.log(\"Parsed DOB: \", dobDate);\r\n\r\n\t\tif (dobDate > eighteenYearsAgo) {\r\n\t\t\tthrow new ErrorResponse(\r\n\t\t\t\t\"User must be at least 18 years old\",\r\n\t\t\t\t\"User is under 18 years old\",\r\n\t\t\t\t410\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif (existingUser) {\r\n\t\t\tthrow new ConflictResponse(\r\n\t\t\t\t\"Username already taken, kinldy try another username\"\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst token = this.generateToken(createUserDto.email);\r\n\t\tthis.logger.log(\r\n\t\t\t`Generated token for user ${createUserDto.email}: ${token}`\r\n\t\t);\r\n\r\n\t\tconst sendEmail = await this.emailService.sendEmail({\r\n\t\t\tto: createUserDto.email,\r\n\t\t\tsubject: \"Verify Your Email Address\",\r\n\t\t\ttemplateName: \"verify_email\",\r\n\t\t\tcontext: {\r\n\t\t\t\tuserName: createUserDto.firstName,\r\n\t\t\t\tcompanyName: \"Thrive\",\r\n\t\t\t\tcurrentYear: new Date().getFullYear(),\r\n\t\t\t\tcompanyAddress: \"123 Thrive St, Thrive City, TC 12345\",\r\n\t\t\t\tsupportEmail: \"\" + process.env.SUPPORT_EMAIL,\r\n\t\t\t\tverificationUrl: `${this.url}?token=${token}`,\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\tthis.logger.log(\"Email sent response: \", sendEmail);\r\n\t\tif (sendEmail instanceof ErrorResponse) {\r\n\t\t\treturn new ErrorResponse(\r\n\t\t\t\t\"Failed to send verification email\",\r\n\t\t\t\t\"Email Sending Error\",\r\n\t\t\t\t500\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tconst salt = await bcrypt.genSalt();\r\n\t\tconst user = this.userRepo.create(createUserDto);\r\n\t\tif (createUserDto.password) {\r\n\t\t\tuser.password = await bcrypt.hash(user.password, salt);\r\n\t\t}\r\n\r\n\t\tawait this.userRepo.save(user);\r\n\t\tthis.logger.log(`User ${user.username} created successfully`);\r\n\r\n\t\treturn new SuccessResponse(\r\n\t\t\t\"User created successfully. Please check your email to verify your account.\"\r\n\t\t);\r\n\t}\r\n\r\n\tgetAllUsers(): Promise<User[]> {\r\n\t\treturn this.userRepo.find();\r\n\t}\r\n\r\n\tgetUser(username: string): Promise<User> {\r\n\t\treturn this.userRepo.findOneBy({ username });\r\n\t}\r\n\r\n\tasync updateUser(\r\n\t\tusername: string,\r\n\t\tupdateuserDto: UpdateUserDto\r\n\t): Promise<User> {\r\n\t\tawait this.userRepo.update(username, updateuserDto);\r\n\t\treturn this.userRepo.findOneBy({ username });\r\n\t}\r\n\r\n\tasync deleteUser(username: string): Promise<void> {\r\n\t\tif (typeof username !== \"string\" || username.trim() === \"\") {\r\n\t\t\tthrow new InvalidCredentialsResponse(\r\n\t\t\t\t\"Invalid username\",\r\n\t\t\t\t\"Username must be a non-empty string\",\r\n\t\t\t\t401\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tconst user = await this.userRepo.findOne({ where: { username } });\r\n\t\tconsole.log(user);\r\n\t\tif (!user) {\r\n\t\t\tthrow new NotFoundResponse(\"User not found\");\r\n\t\t}\r\n\t\tawait this.userRepo.delete({ username });\r\n\t\tconsole.log(user);\r\n\t}\r\n\r\n\tasync forgetPassword(\r\n\t\temail: string\r\n\t): Promise<SuccessResponse | NotFoundResponse> {\r\n\t\tthis.logger.log(`Request to reset password for email: ${email}`);\r\n\t\tif (!email || typeof email !== \"string\" || email.trim() === \"\") {\r\n\t\t\tthis.logger.error(\"Invalid email provided for password reset\");\r\n\t\t\treturn new InvalidCredentialsResponse(\r\n\t\t\t\t\"Invalid email\",\r\n\t\t\t\t\"Email must be a non-empty string\",\r\n\t\t\t\t401\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst user = await this.userRepo.findOneBy({ email });\r\n\t\tif (!user) {\r\n\t\t\tthis.logger.log(`User with email ${email} not found`);\r\n\t\t\treturn new NotFoundResponse(\"User not found\");\r\n\t\t}\r\n\r\n\t\tthis.logger.log(`User with email ${email} found, sending reset email`);\r\n\r\n\t\tconst uniqueToken = this.generateToken(email);\r\n\t\tthis.logger.log(`Generated token for ${email}: ${uniqueToken}`);\r\n\r\n\t\tconst expirationDate = new Date();\r\n\t\texpirationDate.setHours(expirationDate.getHours() + 1); // Token valid for 1 hour\r\n\r\n\t\tconst password_reset = this.passwordResetRepo.create({\r\n\t\t\temail: email,\r\n\t\t\tresetToken: uniqueToken,\r\n\t\t\texpirationDate: expirationDate,\r\n\t\t\tisUsed: false,\r\n\t\t\tuserId: user.id,\r\n\t\t});\r\n\r\n\t\tawait this.passwordResetRepo.save(password_reset);\r\n\t\tthis.logger.log(`Password reset token saved for user ${user.username}`);\r\n\r\n\t\t// send reset password email logic here\r\n\r\n\t\tthis.logger.log(`Sending reset password email to ${email}`);\r\n\t\tconst response = await this.emailService.sendEmail({\r\n\t\t\tto: user.email,\r\n\t\t\tsubject: \"Password Reset Request\",\r\n\t\t\ttemplateName: \"password_rest\",\r\n\t\t\tcontext: {\r\n\t\t\t\tname: user.username,\r\n\t\t\t\tresetLink: `${this.url}}/reset-password?token=${uniqueToken}`,\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\tthis.logger.log(\"Email response received\", response);\r\n\t\tif (response instanceof ErrorResponse) {\r\n\t\t\tthis.logger.error(\r\n\t\t\t\t`Failed to send reset password email: ${response.message}`\r\n\t\t\t);\r\n\t\t\treturn response;\r\n\t\t}\r\n\r\n\t\tthis.logger.log(`Reset password email sent to ${email}`);\r\n\t\treturn new SuccessResponse(\"Password reset email sent\");\r\n\t}\r\n\r\n\tgenerateToken(email: string): string {\r\n\t\tconst iv = crypto.randomBytes(12);\r\n\t\tconst cipher = crypto.createCipheriv(\"aes-256-gcm\", this.secret, iv);\r\n\r\n\t\tlet encrypted = cipher.update(email, \"utf8\", \"base64\");\r\n\t\tencrypted += cipher.final(\"base64\");\r\n\r\n\t\tconst tag = cipher.getAuthTag().toString(\"base64\");\r\n\r\n\t\treturn `${iv.toString(\"base64\")}.${tag}.${encrypted}`;\r\n\t}\r\n\r\n\tverifyToken(token: string): string | InvalidCredentialsResponse {\r\n\t\tconst [iv64, tag64, encrypted] = token.split(\".\");\r\n\t\tif (!iv64 || !tag64 || !encrypted) {\r\n\t\t\tthis.logger.error(\"Invalid token format\");\r\n\t\t\treturn new InvalidCredentialsResponse(\r\n\t\t\t\t\"Invalid token\",\r\n\t\t\t\t\"Token must be a valid encrypted string\",\r\n\t\t\t\t401\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tconst iv = Buffer.from(iv64, \"base64\");\r\n\t\tconst tag = Buffer.from(tag64, \"base64\");\r\n\t\tif (iv.length !== 12 || tag.length !== 16) {\r\n\t\t\tthis.logger.error(\"Invalid IV or tag length\");\r\n\t\t\treturn new InvalidCredentialsResponse(\r\n\t\t\t\t\"Invalid token\",\r\n\t\t\t\t\"IV or tag must be of correct length\",\r\n\t\t\t\t401\r\n\t\t\t);\r\n\t\t}\r\n\t\tthis.logger.log(`Decrypting token with IV: ${iv64} and tag: ${tag64}`);\r\n\t\ttry {\r\n\t\t\tconst decipher = crypto.createDecipheriv(\"aes-256-gcm\", this.secret, iv);\r\n\t\t\tdecipher.setAuthTag(tag);\r\n\r\n\t\t\tlet decrypted = decipher.update(encrypted, \"base64\", \"utf8\");\r\n\t\t\tdecrypted += decipher.final(\"utf8\");\r\n\t\t\tthis.logger.log(`Decrypted email: ${decrypted}`);\r\n\t\t\treturn decrypted;\r\n\t\t} catch (error) {\r\n\t\t\tthis.logger.error(\"Failed to decrypt token\", error);\r\n\t\t\treturn new InvalidCredentialsResponse(\r\n\t\t\t\t\"Invalid token\",\r\n\t\t\t\t\"Token must be a valid encrypted string\",\r\n\t\t\t\t401\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tasync resetPassword(\r\n\t\tresetDetails: ResetPasswordDto\r\n\t): Promise<SuccessResponse | NotFoundResponse | InvalidCredentialsResponse> {\r\n\t\tthis.logger.log(\r\n\t\t\t`Request to reset password with token: ${resetDetails.token}`\r\n\t\t);\r\n\t\tconst emailResult = this.verifyToken(resetDetails.token);\r\n\t\tconst passwordRepos = await this.passwordResetRepo.findOne({\r\n\t\t\twhere: { resetToken: resetDetails.token, isUsed: false },\r\n\t\t});\r\n\r\n\t\tif (!passwordRepos) {\r\n\t\t\tthis.logger.error(\"Invalid or expired token provided for password reset\");\r\n\t\t\treturn new InvalidCredentialsResponse(\r\n\t\t\t\t\"Invalid or expired token\",\r\n\t\t\t\t\"Token must be valid and not used\",\r\n\t\t\t\t401\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// Check if the token has expired (expiration date is in the past)\r\n\t\tif (passwordRepos.expirationDate < new Date()) {\r\n\t\t\tthis.logger.error(\"Token has expired - tokens are only valid for 1 hour\");\r\n\t\t\treturn new InvalidCredentialsResponse(\r\n\t\t\t\t\"Token expired\",\r\n\t\t\t\t\"Password reset token has expired. Please request a new one.\",\r\n\t\t\t\t401\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif (passwordRepos.isUsed) {\r\n\t\t\tthis.logger.error(\"Token has already been used\");\r\n\t\t\treturn new InvalidCredentialsResponse(\r\n\t\t\t\t\"Token already used\",\r\n\t\t\t\t\"Token must be valid and not used\",\r\n\t\t\t\t401\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif (emailResult instanceof InvalidCredentialsResponse) {\r\n\t\t\tthis.logger.error(\"Invalid token provided for password reset\");\r\n\t\t\treturn emailResult;\r\n\t\t}\r\n\r\n\t\tconst user = await this.userRepo.findOneBy({ email: emailResult });\r\n\t\tif (!user) {\r\n\t\t\tthis.logger.log(`User with email ${emailResult} not found`);\r\n\t\t\treturn new NotFoundResponse(\"User not found\");\r\n\t\t}\r\n\r\n\t\tconst salt = await bcrypt.genSalt();\r\n\t\tuser.password = await bcrypt.hash(resetDetails.newPassword, salt);\r\n\t\tawait this.userRepo.update(user.id, { password: user.password });\r\n\t\tawait this.passwordResetRepo.update(passwordRepos.id, {\r\n\t\t\tisUsed: true,\r\n\t\t});\r\n\r\n\t\tawait this.emailService.sendEmail({\r\n\t\t\tto: user.email,\r\n\t\t\tsubject: \"Password Reset Confirmation\",\r\n\t\t\ttemplateName: \"reset_successful\",\r\n\t\t\tcontext: {\r\n\t\t\t\tuserName: user.firstName,\r\n\t\t\t\tcompanyName: \"Thrive\",\r\n\t\t\t\tcurrentYear: new Date().getFullYear(),\r\n\t\t\t\tcompanyAddress: \"123 Thrive St, Thrive City, TC 12345\",\r\n\t\t\t\tsupportEmail: \"iyiolakeni@gmail.com\",\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\tthis.logger.log(`Password reset successfully for user ${user.username}`);\r\n\t\treturn new SuccessResponse(\"Password reset successfully\");\r\n\t}\r\n\r\n\tasync getUserById(id: string): Promise<UserResponse | NotFoundResponse> {\r\n\t\tconst user = await this.userRepo.findOneBy({ id });\r\n\t\tif (!user) {\r\n\t\t\tthis.logger.error(`User with ID ${id} not found`);\r\n\t\t\treturn new NotFoundResponse(\"User not found\");\r\n\t\t}\r\n\t\treturn user;\r\n\t}\r\n\r\n\tasync verifyUser(token: string): Promise<UserResponse | NotFoundResponse> {\r\n\t\tthis.logger.log(`Verifying user with token: ${token}`);\r\n\r\n\t\tconst email = this.verifyToken(token);\r\n\t\tif (email instanceof InvalidCredentialsResponse) {\r\n\t\t\tthis.logger.error(\"Invalid token provided for user verification\");\r\n\t\t\treturn new InvalidCredentialsResponse(\r\n\t\t\t\t\"Unverified User\",\r\n\t\t\t\t\"User verification failed. Invalid token.\",\r\n\t\t\t\t401\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tconst user = await this.userRepo.findOneBy({ email });\r\n\r\n\t\tif (user.isVerified) {\r\n\t\t\tthis.logger.warn(`User with email ${email} is already verified`);\r\n\t\t\treturn new NotFoundResponse(\r\n\t\t\t\t\"User already verified\",\r\n\t\t\t\t\"User Verification Error\"\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif (!user) {\r\n\t\t\tthis.logger.error(`User with email ${email} not found`);\r\n\t\t\treturn new NotFoundResponse(\"User not found\");\r\n\t\t}\r\n\r\n\t\tif (user.isVerified) {\r\n\t\t\tthis.logger.warn(`User with email ${email} is already verified`);\r\n\t\t\treturn new NotFoundResponse(\"User already verified\");\r\n\t\t}\r\n\r\n\t\tuser.isVerified = true;\r\n\t\tawait this.userRepo.update(user.id, { isVerified: true });\r\n\t\tthis.logger.log(`User with email ${email} verified successfully`);\r\n\t\treturn {\r\n\t\t\tid: user.id,\r\n\t\t\tusername: user.username,\r\n\t\t\tfirstName: user.firstName,\r\n\t\t\tlastName: user.lastName,\r\n\t\t\temail: user.email,\r\n\t\t};\r\n\t}\r\n\r\n\tasync search(\r\n\t\tsearchFilter: SearchFilterDto\r\n\t): Promise<\r\n\t\t| SearchResponse<UserResponse[]>\r\n\t\t| SearchResponse<UserResponse>\r\n\t\t| ErrorResponse\r\n\t> {\r\n\t\tthis.logger.log(\r\n\t\t\t`Searching users with filter: ${JSON.stringify(searchFilter)}`\r\n\t\t);\r\n\r\n\t\tconst { searchTerm, sortBy, sortOrder, page, limit } = searchFilter;\r\n\r\n\t\tconst queryBuilder = this.userRepo.createQueryBuilder(\"user\");\r\n\r\n\t\tif (searchTerm) {\r\n\t\t\tqueryBuilder.where(\"user.username LIKE :searchTerm\", {\r\n\t\t\t\tsearchTerm: `%${searchTerm}%`,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (page && limit) {\r\n\t\t\tqueryBuilder.skip((page - 1) * limit).take(limit);\r\n\t\t}\r\n\r\n\t\tif (sortBy && sortOrder) {\r\n\t\t\tif (![\"ASC\", \"DESC\"].includes(sortOrder.toUpperCase())) {\r\n\t\t\t\tthis.logger.error(\"Invalid sort order provided\");\r\n\t\t\t\treturn new ErrorResponse(\r\n\t\t\t\t\t\"Invalid sort order. Use 'ASC' or 'DESC'.\",\r\n\t\t\t\t\t\"Sort Order Error\",\r\n\t\t\t\t\t400\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tif (![\"username\", \"email\", \"phoneNo\"].includes(sortBy)) {\r\n\t\t\t\tthis.logger.error(\"Invalid sort field provided\");\r\n\t\t\t\treturn new ErrorResponse(\r\n\t\t\t\t\t\"Invalid sort field. Use 'username', 'email', or 'phoneNo'.\",\r\n\t\t\t\t\t\"Invalid Sort Field\",\r\n\t\t\t\t\t400\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tqueryBuilder.orderBy(\r\n\t\t\t\t`user.${sortBy}`,\r\n\t\t\t\tsortOrder.toUpperCase() as \"ASC\" | \"DESC\"\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tconst [users, total] = await queryBuilder.getManyAndCount();\r\n\r\n\t\tif (users.length === 0) {\r\n\t\t\tthis.logger.warn(\"No users found matching the search criteria\");\r\n\t\t\treturn new ErrorResponse(\"No users found\", \"Search Error\", 404);\r\n\t\t}\r\n\r\n\t\tthis.logger.log(`Found ${users.length} users matching the search criteria`);\r\n\r\n\t\treturn new SearchResponse(\r\n\t\t\tusers,\r\n\t\t\t{\r\n\t\t\t\ttotal,\r\n\t\t\t\tpage: page || 1,\r\n\t\t\t\tlimit: limit || 10,\r\n\t\t\t\ttotalPages: Math.ceil(total / (limit || 10)),\r\n\t\t\t},\r\n\t\t\t\"User Search Results\",\r\n\t\t\t200\r\n\t\t);\r\n\t}\r\n\r\n\tasync activateUser(username: string): Promise<User | NotFoundResponse> {\r\n\t\tthis.logger.log(`Activating user with username: ${username}`);\r\n\t\tconst user = await this.userRepo.findOneBy({ username });\r\n\t\tif (!user) {\r\n\t\t\tthis.logger.error(`User with username ${username} not found`);\r\n\t\t\treturn new NotFoundResponse(\"User not found\");\r\n\t\t}\r\n\t\tuser.isActive = true;\r\n\t\tawait this.userRepo.update(user.id, { isActive: true });\r\n\t\tthis.logger.log(`User ${username} activated successfully`);\r\n\t\treturn user;\r\n\t}\r\n\r\n\tasync deactivateUser(username: string): Promise<User | NotFoundResponse> {\r\n\t\tthis.logger.log(`Deactivating user with username: ${username}`);\r\n\t\tconst user = await this.userRepo.findOneBy({ username });\r\n\t\tif (!user) {\r\n\t\t\tthis.logger.error(`User with username ${username} not found`);\r\n\t\t\treturn new NotFoundResponse(\"User not found\");\r\n\t\t}\r\n\t\tuser.isActive = false;\r\n\t\tawait this.userRepo.update(user.id, { isActive: false });\r\n\t\tthis.logger.log(`User ${username} deactivated successfully`);\r\n\t\treturn user;\r\n\t}\r\n}\r\n"]}