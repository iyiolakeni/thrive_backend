{"version":3,"file":"user.service.js","sourceRoot":"","sources":["../../../src/user/user.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAAuG;AACvG,6CAAmD;AACnD,qEAA4D;AAC5D,qCAAqC;AAGrC,iCAAgC;AAGzB,IAAM,WAAW,GAAjB,MAAM,WAAW;IACpB,YAEY,QAA0B;QAA1B,aAAQ,GAAR,QAAQ,CAAkB;IACpC,CAAC;IAEH,KAAK,CAAC,cAAc,CAAC,KAAa;QAC9B,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAC,KAAK,EAAC,CAAC,CAAA;IAC3C,CAAC;IAMF,KAAK,CAAC,MAAM,CAAC,aAA4B;QACpC,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;YAC7C,KAAK,EAAE,EAAC,QAAQ,EAAE,aAAa,CAAC,QAAQ,EAAC;SAC5C,CAAC,CAAC;QAEH,IAAG,YAAY,EAAC,CAAC;YACb,MAAM,IAAI,0BAAiB,CAAC,qDAAqD,CAAC,CAAC;QACvF,CAAC;QACD,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QACjD,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC;QACpC,IAAI,aAAa,CAAC,QAAQ,EAAC,CAAC;YACxB,IAAI,CAAC,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAC3D,CAAC;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC;IAED,WAAW;QACP,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;IAChC,CAAC;IAED,OAAO,CAAC,QAAgB;QACpB,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAC,QAAQ,EAAC,CAAC,CAAC;IAC/C,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,QAAgB,EAAE,aAA4B;QAC3D,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;QACpD,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAC,QAAQ,EAAC,CAAC,CAAC;IAC/C,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,QAAgB;QAC7B,IAAG,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,EAAC,CAAC;YACvD,MAAM,IAAI,4BAAmB,CAAC,kBAAkB,CAAC,CAAA;QACrD,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAC,KAAK,EAAE,EAAC,QAAQ,EAAC,EAAC,CAAC,CAAC;QAC9D,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QACjB,IAAG,CAAC,IAAI,EAAC,CAAC;YACN,MAAM,IAAI,0BAAiB,CAAC,gBAAgB,CAAC,CAAA;QACjD,CAAC;QACD,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAC,QAAQ,EAAC,CAAC,CAAC;QACvC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;IACrB,CAAC;CACJ,CAAA;AAxDY,kCAAW;sBAAX,WAAW;IADvB,IAAA,mBAAU,GAAE;IAGJ,WAAA,IAAA,0BAAgB,EAAC,kBAAI,CAAC,CAAA;qCACL,oBAAU;GAHvB,WAAW,CAwDvB","sourcesContent":["import { BadRequestException, ConflictException, Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { User } from 'src/entities/user.entity/user.entity';\r\nimport { Repository } from 'typeorm';\r\nimport { CreateUserDto } from './dto/create-user.dto/create-user.dto';\r\nimport { UpdateUserDto } from './dto/update-user.dto/update-user.dto';\r\nimport * as bcrypt from 'bcrypt'\r\n\r\n@Injectable()\r\nexport class UserService {\r\n    constructor(\r\n        @InjectRepository(User)\r\n        private userRepo: Repository<User>\r\n    ){}\r\n\r\n    async findOneByEmail(email: string): Promise<User | undefined>{\r\n        return this.userRepo.findOneBy({email})\r\n    }\r\n\r\n    // async findOneByPhone(phoneNo: string): Promise<User | undefined>{\r\n    //     return this.userRepo.findOne({where:{phoneNo}})\r\n    // }\r\n\r\n   async create(createUserDto: CreateUserDto): Promise<User>{\r\n        const existingUser = await this.userRepo.findOne({\r\n            where: {username: createUserDto.username}\r\n        });\r\n\r\n        if(existingUser){\r\n            throw new ConflictException('Username already taken, kinldy try another username');\r\n        }\r\n        const user = this.userRepo.create(createUserDto);\r\n        const salt = await bcrypt.genSalt();\r\n        if (createUserDto.password){\r\n            user.password = await bcrypt.hash(user.password, salt);\r\n        }\r\n        return this.userRepo.save(user);\r\n    }\r\n\r\n    getAllUsers(): Promise<User[]>{\r\n        return this.userRepo.find();\r\n    }\r\n\r\n    getUser(username: string): Promise<User>{\r\n        return this.userRepo.findOneBy({username});\r\n    }\r\n\r\n    async updateUser(username: string, updateuserDto: UpdateUserDto): Promise<User>{\r\n        await this.userRepo.update(username, updateuserDto);\r\n        return this.userRepo.findOneBy({username});\r\n    }\r\n\r\n    async deleteUser(username: string): Promise<void>{\r\n        if(typeof username !== 'string' || username.trim() === ''){\r\n            throw new BadRequestException('Invalid username')\r\n        }\r\n\r\n        const user = await this.userRepo.findOne({where: {username}});\r\n        console.log(user)\r\n        if(!user){\r\n            throw new NotFoundException('User not found')\r\n        }\r\n        await this.userRepo.delete({username});\r\n        console.log(user)\r\n    }\r\n}\r\n"]}