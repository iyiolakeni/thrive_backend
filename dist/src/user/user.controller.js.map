{"version":3,"file":"user.controller.js","sourceRoot":"","sources":["../../../src/user/user.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n\tBody,\r\n\tConflictException,\r\n\tController,\r\n\tDelete,\r\n\tGet,\r\n\tHttpException,\r\n\tHttpStatus,\r\n\tParam,\r\n\tPatch,\r\n\tPost,\r\n\tUseGuards,\r\n} from \"@nestjs/common\";\r\nimport { UserService } from \"./user.service\";\r\nimport { ApiBearerAuth, ApiTags } from \"@nestjs/swagger\";\r\nimport { CreateUserDto } from \"./dto/create-user.dto/create-user.dto\";\r\nimport { User } from \"src/entities/user.entity/user.entity\";\r\nimport { UpdateUserDto } from \"./dto/update-user.dto/update-user.dto\";\r\nimport { JwtAwthGuard } from \"src/auth/jwt-auth.guard\";\r\nimport {\r\n\tErrorResponse,\r\n\tNotFoundResponse,\r\n\tSearchResponse,\r\n\tSuccessResponse,\r\n} from \"src/models/response.dto\";\r\nimport { EmailDto } from \"src/email/dto/email.dto\";\r\nimport { ResetPasswordDto } from \"./dto/reset_password.dto\";\r\nimport { UserResponse } from \"src/models/userResponse.dto\";\r\nimport { SearchFilterDto } from \"src/product-categories/dto/search-filter.dto\";\r\n\r\n@Controller(\"User\")\r\n@ApiTags(\"User Details\")\r\nexport class UserController {\r\n\tconstructor(private readonly userService: UserService) {}\r\n\r\n\t@Post(\"create\")\r\n\tasync create(\r\n\t\t@Body() createUserdto: CreateUserDto\r\n\t): Promise<User | ErrorResponse | SuccessResponse> {\r\n\t\ttry {\r\n\t\t\treturn this.userService.create(createUserdto);\r\n\t\t} catch (error) {\r\n\t\t\tif (error instanceof ConflictException) {\r\n\t\t\t\tthrow new HttpException(\"Username already exists\", HttpStatus.CONFLICT);\r\n\t\t\t}\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\t@Get(\"all\")\r\n\tgetAllusers(): Promise<User[]> {\r\n\t\treturn this.userService.getAllUsers();\r\n\t}\r\n\r\n\t@UseGuards(JwtAwthGuard)\r\n\t@ApiBearerAuth()\r\n\t@Get(\"get-user/:username\")\r\n\tasync getUser(@Param(\"username\") username: string): Promise<User> {\r\n\t\treturn this.userService.getUser(username);\r\n\t}\r\n\r\n\t@Patch(\"update/:username\")\r\n\t@UseGuards(JwtAwthGuard)\r\n\t@ApiBearerAuth()\r\n\t// @UseGuards(LocalAuthGuard)\r\n\tasync updateUser(\r\n\t\t@Param(\"username\") username: string,\r\n\t\t@Body() updateUserDto: UpdateUserDto\r\n\t): Promise<User> {\r\n\t\treturn this.userService.updateUser(username, updateUserDto);\r\n\t}\r\n\r\n\t@Delete(\"delete/:username\")\r\n\t@UseGuards(JwtAwthGuard)\r\n\t// @UseGuards(LocalAuthGuard)\r\n\tasync deleteUser(@Param(\"username\") username: string): Promise<void> {\r\n\t\treturn this.userService.deleteUser(username);\r\n\t}\r\n\r\n\t@Post(\"forget-password\")\r\n\tasync resetPasword(\r\n\t\t@Body() email: EmailDto\r\n\t): Promise<SuccessResponse | NotFoundResponse> {\r\n\t\treturn this.userService.forgetPassword(email.email);\r\n\t}\r\n\r\n\t@Post(\"reset-password\")\r\n\tasync resetPassword(\r\n\t\t@Body() resetDetails: ResetPasswordDto\r\n\t): Promise<SuccessResponse | NotFoundResponse> {\r\n\t\treturn this.userService.resetPassword(resetDetails);\r\n\t}\r\n\r\n\t@Get(\"get-user/:id\")\r\n\tasync getUserById(\r\n\t\t@Param(\"id\") id: string\r\n\t): Promise<UserResponse | NotFoundResponse> {\r\n\t\treturn this.userService.getUserById(id);\r\n\t}\r\n\r\n\t@Post(\"search\")\r\n\tasync searchUser(\r\n\t\t@Body() searchFilter: SearchFilterDto\r\n\t): Promise<\r\n\t\t| SearchResponse<UserResponse>\r\n\t\t| SearchResponse<UserResponse[]>\r\n\t\t| NotFoundResponse\r\n\t> {\r\n\t\treturn this.userService.search(searchFilter);\r\n\t}\r\n\r\n\t@Post(\"activate/:username\")\r\n\tasync activateUser(\r\n\t\t@Param(\"username\") username: string\r\n\t): Promise<User | NotFoundResponse> {\r\n\t\treturn this.userService.activateUser(username);\r\n\t}\r\n\r\n\t@Post(\"deactivate/:username\")\r\n\tasync deactivateUser(\r\n\t\t@Param(\"username\") username: string\r\n\t): Promise<User | NotFoundResponse> {\r\n\t\treturn this.userService.deactivateUser(username);\r\n\t}\r\n\r\n\t@Post(\"verify-email/:token\")\r\n\tasync verifyEmail(\r\n\t\t@Param(\"token\") token: string\r\n\t): Promise<UserResponse | NotFoundResponse> {\r\n\t\treturn this.userService.verifyUser(token);\r\n\t}\r\n}\r\n"]}