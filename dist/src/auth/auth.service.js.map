{"version":3,"file":"auth.service.js","sourceRoot":"","sources":["../../../src/auth/auth.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { ConflictException, Injectable } from \"@nestjs/common\";\r\nimport { JwtService } from \"@nestjs/jwt\";\r\nimport { UserService } from \"src/user/user.service\";\r\nimport * as bcrypt from \"bcrypt\";\r\nimport { User } from \"src/entities/user.entity/user.entity\";\r\nimport { LoginDto } from \"src/user/dto/login.dto\";\r\nimport {\r\n\tDataResponse,\r\n\tInvalidCredentialsResponse,\r\n\tLoginResponse,\r\n\tNotFoundResponse,\r\n} from \"src/models/response.dto\";\r\nimport { UserResponse } from \"src/models/userResponse.dto\";\r\nimport { ConfigService } from \"@nestjs/config\";\r\nimport { SharedService } from \"src/shared-service/shared-service.service\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { LoginDetails } from \"src/entities/login.entity/logindetails.entity\";\r\nimport { Repository } from \"typeorm\";\r\nimport { LoginDetailsDto } from \"src/user/dto/logindetails.dto\";\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n\tconstructor(\r\n\t\tprivate sharedService: SharedService,\r\n\t\tprivate jwtService: JwtService,\r\n\t\tprivate configService: ConfigService,\r\n\t\t@InjectRepository(LoginDetails)\r\n\t\tprivate loginDetailsRepo: Repository<LoginDetails>\r\n\t) {}\r\n\r\n\tasync validateUser(\r\n\t\temail: string,\r\n\t\tpassword: string\r\n\t): Promise<\r\n\t\tDataResponse<UserResponse> | InvalidCredentialsResponse | NotFoundResponse\r\n\t> {\r\n\t\tconst user = await this.sharedService.findOneByEmail(email);\r\n\r\n\t\tif (user instanceof NotFoundResponse) {\r\n\t\t\treturn new NotFoundResponse(\"User not found\");\r\n\t\t}\r\n\r\n\t\tconst foundUser = user instanceof DataResponse ? user.data : null;\r\n\t\tif (foundUser && (await bcrypt.compare(password, foundUser.password))) {\r\n\t\t\tconst { password, ...result } = foundUser;\r\n\t\t\treturn new DataResponse<UserResponse>(result, \"User found\");\r\n\t\t} else {\r\n\t\t\treturn new InvalidCredentialsResponse(\r\n\t\t\t\t\"Invalid credentials\",\r\n\t\t\t\t\"Unauthorized\",\r\n\t\t\t\tfoundUser.id\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tasync login(\r\n\t\tloginDto: LoginDto,\r\n\t\tmeta: {\r\n\t\t\tipAddress: string;\r\n\t\t\tuserAgent: string;\r\n\t\t\tdeviceInfo: string;\r\n\t\t\tlocation: string;\r\n\t\t}\r\n\t): Promise<LoginResponse | InvalidCredentialsResponse | NotFoundResponse> {\r\n\t\tconst response = await this.validateUser(loginDto.email, loginDto.password);\r\n\r\n\t\tconsole.log(\"Login response:\", response);\r\n\r\n\t\tif (response instanceof InvalidCredentialsResponse) {\r\n\t\t\tawait this.saveLoginDetails(response.userId, meta, response);\r\n\t\t\tthrow new InvalidCredentialsResponse(\r\n\t\t\t\t\"Invalid credentials\",\r\n\t\t\t\t\"Unauthorized\",\r\n\t\t\t\t\"\"\r\n\t\t\t);\r\n\t\t}\r\n\t\tif (response instanceof NotFoundResponse) {\r\n\t\t\tthrow new NotFoundResponse(\"User not found\");\r\n\t\t}\r\n\r\n\t\tconst user = response.data;\r\n\r\n\t\tconst payload = {\r\n\t\t\temail: user.email,\r\n\t\t\tsub: user.id,\r\n\t\t};\r\n\t\tawait this.saveLoginDetails(user.id, meta, response);\r\n\r\n\t\tconst accessToken = this.jwtService.sign(payload, {\r\n\t\t\texpiresIn: \"15m\",\r\n\t\t\tsecret: this.configService.get<string>(\"JWT_SECRET\"),\r\n\t\t});\r\n\r\n\t\t// âœ… Now populate the login history details\r\n\r\n\t\treturn new LoginResponse(accessToken, \"Login successful\");\r\n\t}\r\n\r\n\tsaveLoginDetails(\r\n\t\tuserId: string,\r\n\t\tmeta: {\r\n\t\t\tipAddress: string;\r\n\t\t\tuserAgent: string;\r\n\t\t\tdeviceInfo: string;\r\n\t\t\tlocation: string;\r\n\t\t},\r\n\t\tresponse: { statusCode: number; message?: string }\r\n\t): Promise<LoginDetails> {\r\n\t\tconst loginDetails = new LoginDetailsDto();\r\n\t\tloginDetails.userId = userId;\r\n\t\tloginDetails.ipAddress = meta.ipAddress;\r\n\t\tloginDetails.userAgent = meta.userAgent;\r\n\t\tloginDetails.deviceInfo = meta.deviceInfo;\r\n\t\tloginDetails.loginSuccess = response.statusCode === 200 ? true : false; // Assuming statusCode 200 means success\r\n\t\tconsole.log(\"Login details:\", meta.location);\r\n\t\tconst loginDetailsEntity = this.loginDetailsRepo.create(loginDetails);\r\n\t\treturn this.loginDetailsRepo.save(loginDetailsEntity);\r\n\t}\r\n}\r\n"]}