{
    "sourceFile": "src/products/products.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1749974600561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749977725328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,21 +4,64 @@\n import { InjectRepository } from \"@nestjs/typeorm\";\r\n import { Product } from \"./entities/product.entity\";\r\n import { Repository } from \"typeorm\";\r\n import { SharedService } from \"src/shared-service/shared-service.service\";\r\n+import {\r\n+\tDataResponse,\r\n+\tInvalidCredentialsResponse,\r\n+\tSuccessResponse,\r\n+} from \"src/models/response.dto\";\r\n \r\n @Injectable()\r\n export class ProductsService {\r\n-\tprivate readonly = new Logger(ProductsService.name);\r\n+\tprivate readonly logger = new Logger(ProductsService.name);\r\n \r\n \tconstructor(\r\n \t\t@InjectRepository(Product)\r\n \t\tprivate productRepo: Repository<Product>,\r\n \t\tprivate shareService: SharedService\r\n \t) {}\r\n \r\n-\tcreate(createProductDto: CreateProductDto) {\r\n-\t\treturn \"This action adds a new product\";\r\n+\tasync create(\r\n+\t\tcreateProductDto: CreateProductDto\r\n+\t): Promise<SuccessResponse | InvalidCredentialsResponse> {\r\n+\t\tthis.logger.log(\"Creating a new product\", createProductDto.name);\r\n+\r\n+\t\t// Validate the business ID\r\n+\t\tconst businessResponse = await this.shareService.findBusinessById(\r\n+\t\t\tcreateProductDto.businessId\r\n+\t\t);\r\n+\t\tconst foundBusiness =\r\n+\t\t\tbusinessResponse instanceof DataResponse ? businessResponse.data : null;\r\n+\t\tthis.logger.log(\"Business found\", foundBusiness);\r\n+\r\n+\t\tif (!foundBusiness) {\r\n+\t\t\tthis.logger.error(\"Business not found\");\r\n+\t\t\treturn new InvalidCredentialsResponse(\"Business not found\", \"\", 404);\r\n+\t\t}\r\n+\r\n+\t\tconst productCategoryResponse =\r\n+\t\t\tawait this.shareService.findProductCategoryById(\r\n+\t\t\t\tcreateProductDto.categoryId\r\n+\t\t\t);\r\n+\t\tconst foundProductCategory =\r\n+\t\t\tproductCategoryResponse instanceof DataResponse\r\n+\t\t\t\t? productCategoryResponse.data\r\n+\t\t\t\t: null;\r\n+\r\n+\t\tif (!foundProductCategory) {\r\n+\t\t\tthis.logger.error(\"Product category not found\");\r\n+\t\t\treturn new InvalidCredentialsResponse(\r\n+\t\t\t\t\"Product category not found\",\r\n+\t\t\t\t\"\",\r\n+\t\t\t\t404\r\n+\t\t\t);\r\n+\t\t}\r\n+\r\n+\t\tthis.logger.log(\"Product category found\", foundProductCategory);\r\n+\r\n+\t\tconst product = this.productRepo.create(createProductDto);\r\n+\t\tawait this.productRepo.save(product);\r\n \t}\r\n \r\n \tfindAll() {\r\n \t\treturn `This action returns all products`;\r\n"
                },
                {
                    "date": 1749977746463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n \r\n \t\tconst product = this.productRepo.create(createProductDto);\r\n \t\tawait this.productRepo.save(product);\r\n \r\n-\t\treturn new SuccessResponse(\"Product created successfully\", 200);\r\n+\t\treturn new SuccessResponse(\"Product created successfully\", 200);  \r\n \t}\r\n \r\n \tfindAll() {\r\n \t\treturn `This action returns all products`;\r\n"
                }
            ],
            "date": 1749974600561,
            "name": "Commit-0",
            "content": "import { Injectable, Logger } from \"@nestjs/common\";\r\nimport { CreateProductDto } from \"./dto/create-product.dto\";\r\nimport { UpdateProductDto } from \"./dto/update-product.dto\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { Product } from \"./entities/product.entity\";\r\nimport { Repository } from \"typeorm\";\r\nimport { SharedService } from \"src/shared-service/shared-service.service\";\r\n\r\n@Injectable()\r\nexport class ProductsService {\r\n\tprivate readonly = new Logger(ProductsService.name);\r\n\r\n\tconstructor(\r\n\t\t@InjectRepository(Product)\r\n\t\tprivate productRepo: Repository<Product>,\r\n\t\tprivate shareService: SharedService\r\n\t) {}\r\n\r\n\tcreate(createProductDto: CreateProductDto) {\r\n\t\treturn \"This action adds a new product\";\r\n\t}\r\n\r\n\tfindAll() {\r\n\t\treturn `This action returns all products`;\r\n\t}\r\n\r\n\tfindOne(id: number) {\r\n\t\treturn `This action returns a #${id} product`;\r\n\t}\r\n\r\n\tupdate(id: number, updateProductDto: UpdateProductDto) {\r\n\t\treturn `This action updates a #${id} product`;\r\n\t}\r\n\r\n\tremove(id: number) {\r\n\t\treturn `This action removes a #${id} product`;\r\n\t}\r\n}\r\n"
        }
    ]
}