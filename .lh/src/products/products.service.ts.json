{
    "sourceFile": "src/products/products.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1749974600561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749977725328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,21 +4,64 @@\n import { InjectRepository } from \"@nestjs/typeorm\";\r\n import { Product } from \"./entities/product.entity\";\r\n import { Repository } from \"typeorm\";\r\n import { SharedService } from \"src/shared-service/shared-service.service\";\r\n+import {\r\n+\tDataResponse,\r\n+\tInvalidCredentialsResponse,\r\n+\tSuccessResponse,\r\n+} from \"src/models/response.dto\";\r\n \r\n @Injectable()\r\n export class ProductsService {\r\n-\tprivate readonly = new Logger(ProductsService.name);\r\n+\tprivate readonly logger = new Logger(ProductsService.name);\r\n \r\n \tconstructor(\r\n \t\t@InjectRepository(Product)\r\n \t\tprivate productRepo: Repository<Product>,\r\n \t\tprivate shareService: SharedService\r\n \t) {}\r\n \r\n-\tcreate(createProductDto: CreateProductDto) {\r\n-\t\treturn \"This action adds a new product\";\r\n+\tasync create(\r\n+\t\tcreateProductDto: CreateProductDto\r\n+\t): Promise<SuccessResponse | InvalidCredentialsResponse> {\r\n+\t\tthis.logger.log(\"Creating a new product\", createProductDto.name);\r\n+\r\n+\t\t// Validate the business ID\r\n+\t\tconst businessResponse = await this.shareService.findBusinessById(\r\n+\t\t\tcreateProductDto.businessId\r\n+\t\t);\r\n+\t\tconst foundBusiness =\r\n+\t\t\tbusinessResponse instanceof DataResponse ? businessResponse.data : null;\r\n+\t\tthis.logger.log(\"Business found\", foundBusiness);\r\n+\r\n+\t\tif (!foundBusiness) {\r\n+\t\t\tthis.logger.error(\"Business not found\");\r\n+\t\t\treturn new InvalidCredentialsResponse(\"Business not found\", \"\", 404);\r\n+\t\t}\r\n+\r\n+\t\tconst productCategoryResponse =\r\n+\t\t\tawait this.shareService.findProductCategoryById(\r\n+\t\t\t\tcreateProductDto.categoryId\r\n+\t\t\t);\r\n+\t\tconst foundProductCategory =\r\n+\t\t\tproductCategoryResponse instanceof DataResponse\r\n+\t\t\t\t? productCategoryResponse.data\r\n+\t\t\t\t: null;\r\n+\r\n+\t\tif (!foundProductCategory) {\r\n+\t\t\tthis.logger.error(\"Product category not found\");\r\n+\t\t\treturn new InvalidCredentialsResponse(\r\n+\t\t\t\t\"Product category not found\",\r\n+\t\t\t\t\"\",\r\n+\t\t\t\t404\r\n+\t\t\t);\r\n+\t\t}\r\n+\r\n+\t\tthis.logger.log(\"Product category found\", foundProductCategory);\r\n+\r\n+\t\tconst product = this.productRepo.create(createProductDto);\r\n+\t\tawait this.productRepo.save(product);\r\n \t}\r\n \r\n \tfindAll() {\r\n \t\treturn `This action returns all products`;\r\n"
                },
                {
                    "date": 1749977746463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n \r\n \t\tconst product = this.productRepo.create(createProductDto);\r\n \t\tawait this.productRepo.save(product);\r\n \r\n-\t\treturn new SuccessResponse(\"Product created successfully\", 200);\r\n+\t\treturn new SuccessResponse(\"Product created successfully\", 200);  \r\n \t}\r\n \r\n \tfindAll() {\r\n \t\treturn `This action returns all products`;\r\n"
                },
                {
                    "date": 1752062658448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n \tNotFoundResponse,\r\n \tSuccessResponse,\r\n \tUnauthorizedResponse,\r\n } from \"src/models/response.dto\";\r\n+import { CreateBusinessProductDto } from \"./dto/create-product-business.dto\";\r\n \r\n @Injectable()\r\n export class ProductsService {\r\n \tprivate readonly logger = new Logger(ProductsService.name);\r\n@@ -267,8 +268,148 @@\n \t\t\t);\r\n \t\t}\r\n \t}\r\n \r\n+\tasync createBulkByBusinessId(\r\n+\t\tcreateProductDtos: CreateBusinessProductDto[],\r\n+\t\taccessToken: string, businessId: string\r\n+\t): Promise<SuccessResponse | InvalidCredentialsResponse | ErrorResponse> {\r\n+\t\tconst results: Product[] = [];\r\n+\t\tconst errors: string[] = [];\r\n+\r\n+\t\ttry {\r\n+\t\t\tconst decodedToken = await this.shareService.decodeToken(accessToken);\r\n+\t\t\tif (decodedToken instanceof UnauthorizedResponse) {\r\n+\t\t\t\treturn new ErrorResponse(\r\n+\t\t\t\t\t\"Invalid access token\",\r\n+\t\t\t\t\t\"Authentication Error\",\r\n+\t\t\t\t\t401\r\n+\t\t\t\t);\r\n+\t\t\t}\r\n+\r\n+\t\t\tconst userIsAdmin = await this.shareService.verifyUserIsAdmin(\r\n+\t\t\t\tdecodedToken.data.username\r\n+\t\t\t);\r\n+\r\n+\t\t\tif (!userIsAdmin) {\r\n+\t\t\t\treturn new UnauthorizedResponse(\r\n+\t\t\t\t\t\"Only admins can create product categories\",\r\n+\t\t\t\t\t\"Authorization Error\"\r\n+\t\t\t\t);\r\n+\t\t\t}\r\n+\r\n+\t\t\tthis.logger.log(\r\n+\t\t\t\t`Starting bulk creation of ${createProductDtos.length} products`\r\n+\t\t\t);\r\n+\r\n+\t\t\t// Validate the business ID\r\n+\t\t\tconst businessResponse = await this.shareService.findBusinessById(\r\n+\t\t\t\tbusinessId\r\n+\t\t\t);\r\n+\t\t\tconst foundBusiness =\r\n+\t\t\t\tbusinessResponse instanceof DataResponse ? businessResponse.data : null;\r\n+\r\n+\t\t\tif (!foundBusiness) {\r\n+\t\t\t\tconst errorMsg = `Business not found for products`;\r\n+\t\t\t\tthis.logger.error(errorMsg);\r\n+\t\t\t\treturn new InvalidCredentialsResponse(\r\n+\t\t\t\t\t\"Business not found\",\r\n+\t\t\t\t\t\"Not Found\",\r\n+\t\t\t\t\t404\r\n+\t\t\t\t);\r\n+\t\t\t}\r\n+\r\n+\t\t\tfor (let i = 0; i < createProductDtos.length; i++) {\r\n+\t\t\t\tconst createProductDto = createProductDtos[i];\r\n+\t\t\t\ttry {\r\n+\t\t\t\t\tthis.logger.log(\r\n+\t\t\t\t\t\t`Creating product ${i + 1}/${createProductDtos.length}: ${\r\n+\t\t\t\t\t\t\tcreateProductDto.name\r\n+\t\t\t\t\t\t}`\r\n+\t\t\t\t\t);\r\n+\r\n+\t\t\t\t\t// Check if product name already exists\r\n+\t\t\t\t\tconst existingProduct = await this.productRepo.findOneBy({\r\n+\t\t\t\t\t\tname: createProductDto.name,\r\n+\t\t\t\t\t});\r\n+\r\n+\t\t\t\t\tif (\r\n+\t\t\t\t\t\texistingProduct !== null &&\r\n+\t\t\t\t\t\texistingProduct.businessId === businessId\r\n+\t\t\t\t\t) {\r\n+\t\t\t\t\t\tconst errorMsg = `Product with name '${createProductDto.name}' already exists under the business`;\r\n+\t\t\t\t\t\tthis.logger.error(errorMsg);\r\n+\t\t\t\t\t\terrors.push(errorMsg);\r\n+\t\t\t\t\t\tcontinue;\r\n+\t\t\t\t\t}\r\n+\r\n+\t\t\t\t\t// Validate product category\r\n+\t\t\t\t\tconst productCategoryResponse =\r\n+\t\t\t\t\t\tawait this.shareService.findProductCategoryById(\r\n+\t\t\t\t\t\t\tcreateProductDto.categoryId\r\n+\t\t\t\t\t\t);\r\n+\t\t\t\t\tconst foundProductCategory =\r\n+\t\t\t\t\t\tproductCategoryResponse instanceof DataResponse\r\n+\t\t\t\t\t\t\t? productCategoryResponse.data\r\n+\t\t\t\t\t\t\t: null;\r\n+\r\n+\t\t\t\t\tif (!foundProductCategory) {\r\n+\t\t\t\t\t\tconst errorMsg = `Product category not found for product '${createProductDto.name}'`;\r\n+\t\t\t\t\t\tthis.logger.error(errorMsg);\r\n+\t\t\t\t\t\terrors.push(errorMsg);\r\n+\t\t\t\t\t\tcontinue;\r\n+\t\t\t\t\t}\r\n+\r\n+\t\t\t\t\t// Create and save the product\r\n+\t\t\t\t\tconst product = this.productRepo.create({\r\n+\t\t\t\t\t\t...createProductDto,\r\n+\t\t\t\t\t\tprice:\r\n+\t\t\t\t\t\t\tcreateProductDto.unitPrice -\r\n+\t\t\t\t\t\t\tcreateProductDto.unitPrice * (createProductDto.discount / 100),\r\n+\t\t\t\t\t});\r\n+\r\n+\t\t\t\t\tconst savedProduct = await this.productRepo.save(product);\r\n+\t\t\t\t\tresults.push(savedProduct);\r\n+\t\t\t\t\tthis.logger.log(\r\n+\t\t\t\t\t\t`Product '${createProductDto.name}' created successfully`\r\n+\t\t\t\t\t);\r\n+\t\t\t\t} catch (productError) {\r\n+\t\t\t\t\tconst errorMsg = `Error creating product '${createProductDto.name}': ${productError.message}`;\r\n+\t\t\t\t\tthis.logger.error(errorMsg);\r\n+\t\t\t\t\terrors.push(errorMsg);\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\r\n+\t\t\t// Return results based on success/failure counts\r\n+\t\t\tif (results.length === 0) {\r\n+\t\t\t\treturn new ErrorResponse(\r\n+\t\t\t\t\t`Failed to create all products. Errors: ${errors.join(\"; \")}`,\r\n+\t\t\t\t\t\"Bulk Creation Failed\",\r\n+\t\t\t\t\t400\r\n+\t\t\t\t);\r\n+\t\t\t} else if (errors.length === 0) {\r\n+\t\t\t\treturn new SuccessResponse(\r\n+\t\t\t\t\t`Successfully created all ${results.length} products`,\r\n+\t\t\t\t\t200\r\n+\t\t\t\t);\r\n+\t\t\t} else {\r\n+\t\t\t\treturn new SuccessResponse(\r\n+\t\t\t\t\t`Partially successful: ${results.length} products created, ${\r\n+\t\t\t\t\t\terrors.length\r\n+\t\t\t\t\t} failed. Errors: ${errors.join(\"; \")}`,\r\n+\t\t\t\t\t206 // Partial Content\r\n+\t\t\t\t);\r\n+\t\t\t}\r\n+\t\t} catch (error) {\r\n+\t\t\tthis.logger.error(\"Error during bulk product creation\", error);\r\n+\t\t\treturn new ErrorResponse(\r\n+\t\t\t\t\"An error occurred while creating products in bulk\",\r\n+\t\t\t\t\"Bulk Product Creation Error\",\r\n+\t\t\t\t500\r\n+\t\t\t);\r\n+\t\t}\r\n+\t}\r\n+\r\n \tasync findAll(): Promise<DataResponse<Product[]> | NotFoundResponse> {\r\n \t\tthis.logger.log(\"Fetching all products\");\r\n \r\n \t\tconst products = await this.productRepo.find();\r\n"
                }
            ],
            "date": 1749974600561,
            "name": "Commit-0",
            "content": "import { Injectable, Logger } from \"@nestjs/common\";\r\nimport { CreateProductDto } from \"./dto/create-product.dto\";\r\nimport { UpdateProductDto } from \"./dto/update-product.dto\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { Product } from \"./entities/product.entity\";\r\nimport { Repository } from \"typeorm\";\r\nimport { SharedService } from \"src/shared-service/shared-service.service\";\r\n\r\n@Injectable()\r\nexport class ProductsService {\r\n\tprivate readonly = new Logger(ProductsService.name);\r\n\r\n\tconstructor(\r\n\t\t@InjectRepository(Product)\r\n\t\tprivate productRepo: Repository<Product>,\r\n\t\tprivate shareService: SharedService\r\n\t) {}\r\n\r\n\tcreate(createProductDto: CreateProductDto) {\r\n\t\treturn \"This action adds a new product\";\r\n\t}\r\n\r\n\tfindAll() {\r\n\t\treturn `This action returns all products`;\r\n\t}\r\n\r\n\tfindOne(id: number) {\r\n\t\treturn `This action returns a #${id} product`;\r\n\t}\r\n\r\n\tupdate(id: number, updateProductDto: UpdateProductDto) {\r\n\t\treturn `This action updates a #${id} product`;\r\n\t}\r\n\r\n\tremove(id: number) {\r\n\t\treturn `This action removes a #${id} product`;\r\n\t}\r\n}\r\n"
        }
    ]
}