{
    "sourceFile": "src/email/email.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1749731379532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749733016669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { CreateEmailDto } from \"./dto/create-email.dto\";\r\n import { UpdateEmailDto } from \"./dto/update-email.dto\";\r\n import { ConfigService } from \"@nestjs/config\";\r\n import * as mailer from \"@sendgrid/mail\";\r\n-import path from \"path\";\r\n+import * as path from \"path\";\r\n import * as fs from \"fs\";\r\n import * as handler from \"handlebars\";\r\n \r\n @Injectable()\r\n"
                },
                {
                    "date": 1749733060812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,11 +23,21 @@\n \t\ttemplateName: string,\r\n \t\tcontext: Record<string, any>\r\n \t): string {\r\n \t\tconst filePath = path.join(__dirname, \"templates\", `${templateName}.hbs`);\r\n-\t\tconst source = fs.readFileSync(filePath, \"utf8\");\r\n-\t\tconst template = handler.compile(source);\r\n-\t\treturn template(context);\r\n+\t\tthis.logger.log(`Loading template from: ${filePath}`);\r\n+\r\n+\t\t        try {\r\n+\t\t\t\t\t\t\tconst source = fs.readFileSync(filePath, \"utf8\");\r\n+\t\t\t\t\t\t\tconst template = handler.compile(source);\r\n+\t\t\t\t\t\t\treturn template(context);\r\n+\t\t\t\t\t\t} catch (error) {\r\n+\t\t\t\t\t\t\tthis.logger.error(\r\n+\t\t\t\t\t\t\t\t`Failed to compile template: ${templateName}`,\r\n+\t\t\t\t\t\t\t\terror\r\n+\t\t\t\t\t\t\t);\r\n+\t\t\t\t\t\t\tthrow new Error(`Template not found: ${templateName}`);\r\n+\t\t\t\t\t\t}\r\n \t}\r\n \r\n \tasync sendEmail(createEmailDto: CreateEmailDto): Promise<void> {\r\n \t\tconst { to, subject, templateName, context } = createEmailDto;\r\n"
                }
            ],
            "date": 1749731379532,
            "name": "Commit-0",
            "content": "import { Injectable, Logger } from '@nestjs/common';\r\nimport { CreateEmailDto } from './dto/create-email.dto';\r\nimport { UpdateEmailDto } from './dto/update-email.dto';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport * as mailer from '@sendgrid/mail';\r\nimport path from 'path';\r\nimport * as fs from 'fs';\r\nimport * as handler from 'handlebars';\r\n\r\n@Injectable()\r\nexport class EmailService {\r\n  private readonly logger = new Logger(EmailService.name);\r\n  private readonly fromEmail: string;\r\n\r\n  constructor(private readonly configService: ConfigService) {\r\n    const apiKey = this.configService.get<string>(\"SENDGRID_APIKEY\");\r\n    this.fromEmail = this.configService.get<string>(\"EMAIL_FROM\");\r\n    this.logger.log('Email service initialized with SendGrid API key.');\r\n    mailer.setApiKey(apiKey);\r\n  }\r\n  \r\n  private compileTemplate(templateName: string, context: Record<string, any>): string {\r\n    const filePath = path.join(__dirname, 'templates', `${templateName}.hbs`);\r\n    const source = fs.readFileSync(filePath, 'utf8');\r\n    const template = handler.compile(source);\r\n    return template(context);\r\n    }\r\n\r\n  async sendEmail(createEmailDto: CreateEmailDto): Promise<void> {\r\n    const { to, subject, templateName, context } = createEmailDto;\r\n\r\n    const htmlContent = this.compileTemplate(templateName, context);\r\n\r\n    const msg = {\r\n      to,\r\n      from: this.fromEmail,\r\n      subject,\r\n      html: htmlContent,\r\n    };\r\n\r\n    try {\r\n      await mailer.send(msg);\r\n      this.logger.log(`Email sent successfully to ${to}`);\r\n    } catch (error) {\r\n      this.logger.error(`Failed to send email to ${to}`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n}\r\n"
        }
    ]
}