{
    "sourceFile": "src/product-categories/product-categories.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1749825147130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749832174498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,13 +4,15 @@\n import {\r\n \tDataResponse,\r\n \tErrorResponse,\r\n \tInvalidCredentialsResponse,\r\n+\tSearchResponse,\r\n \tSuccessResponse,\r\n } from \"src/models/response.dto\";\r\n import { InjectRepository } from \"@nestjs/typeorm\";\r\n import { ProductCategory } from \"./entities/product-category.entity\";\r\n import { Repository } from \"typeorm\";\r\n+import { SearchFilterDto } from \"./dto/search-filter.dto\";\r\n \r\n @Injectable()\r\n export class ProductCategoriesService {\r\n \tconstructor(\r\n@@ -188,6 +190,61 @@\n \t\treturn new SuccessResponse(\r\n \t\t\t\"Product category deactivated successfully\",\r\n \t\t\t200\r\n \t\t);\r\n-\t}\r\n+  }\r\n+  \r\n+  async search(searchFilter: SearchFilterDto): Promise<DataResponse<ProductCategory[]> | ErrorResponse> {\r\n+    const { name, page, limit, sortBy, sortOrder } = searchFilter;\r\n+    const queryBuilder = this.productCategoryRepo.createQueryBuilder(\"productCategory\");\r\n+    if (name) {\r\n+      queryBuilder.where(\"productCategory.name ILIKE :name\", { name: `%${name}%` });\r\n+    }\r\n+    if (page && limit) {\r\n+      queryBuilder\r\n+        .skip((page - 1) * limit)\r\n+        .take(limit);\r\n+    }\r\n+    if (sortBy && sortOrder) {\r\n+      if (![\"ASC\", \"DESC\"].includes(sortOrder.toUpperCase())) {\r\n+        return new ErrorResponse(\r\n+          \"Invalid sort order. Use 'ASC' or 'DESC'.\",\r\n+          \"Product Category Search Error\",\r\n+          400\r\n+        );\r\n+      }\r\n+\r\n+      if (![\"name\"].includes(sortBy)) {\r\n+        return new ErrorResponse(\r\n+          \"Invalid sort field. Use name.\",\r\n+          \"Product Category Search Error\",\r\n+          400\r\n+        );\r\n+      }\r\n+\r\n+      queryBuilder.orderBy(`productCategory.${sortBy}`, sortOrder.toUpperCase() as \"ASC\" | \"DESC\");\r\n+    }\r\n+    const [result, total] = await queryBuilder.getManyAndCount();\r\n+\r\n+    if (result.length === 0) {\r\n+      return new ErrorResponse(\r\n+        \"No product categories found matching the search criteria\",\r\n+        \"Product Category Search Error\",\r\n+        404\r\n+      );\r\n+    }\r\n+\r\n+\treturn new SearchResponse(\r\n+\t  result,\r\n+\t  { \r\n+\t\ttotal,\r\n+\t\tpage: page || 1,\r\n+\t\tlimit: limit || 10,\r\n+\t\ttotalPages: Math.ceil(total / (limit || 10))\r\n+\t  },\r\n+\t  \"Product Categories Search Results\",\r\n+\t  200\r\n+\t)\r\n+\r\n+  }\r\n+\r\n }\r\n"
                },
                {
                    "date": 1749832685225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,10 +217,10 @@\n \t\t\t}\r\n \r\n \t\t\tif (![\"name\"].includes(sortBy)) {\r\n \t\t\t\treturn new ErrorResponse(\r\n-\t\t\t\t\t\"Invalid sort field. Use name.\",\r\n-\t\t\t\t\t\"Product Category Search Error\",\r\n+\t\t\t\t\t\"Sorting requires a name.\",\r\n+\t\t\t\t\t\"Invalid Sort Field\",\r\n \t\t\t\t\t400\r\n \t\t\t\t);\r\n \t\t\t}\r\n \r\n"
                }
            ],
            "date": 1749825147130,
            "name": "Commit-0",
            "content": "import { Injectable } from '@nestjs/common';\r\nimport { CreateProductCategoryDto } from './dto/create-product-category.dto';\r\nimport { UpdateProductCategoryDto } from './dto/update-product-category.dto';\r\nimport { DataResponse, ErrorResponse, InvalidCredentialsResponse, SuccessResponse } from 'src/models/response.dto';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { ProductCategory } from './entities/product-category.entity';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ProductCategoriesService {\r\n\r\n  constructor(\r\n    @InjectRepository(ProductCategory)\r\n    private readonly productCategoryRepo: Repository<ProductCategory>,\r\n  ){}\r\n\r\n  async create(createProductCategoryDto: CreateProductCategoryDto): Promise<SuccessResponse | ErrorResponse | InvalidCredentialsResponse> {\r\n    const productCategoryExists = await this.productCategoryRepo.findOne({\r\n      where: {\r\n      name: createProductCategoryDto.name,\r\n      }\r\n    })\r\n    \r\n    if (productCategoryExists) {\r\n      return new InvalidCredentialsResponse(\r\n        \"Product category with this name already exists\",\r\n        \"Product Category Creation Error\",\r\n      403);\r\n    }\r\n\r\n    const productCategory = this.productCategoryRepo.create(createProductCategoryDto);\r\n    await this.productCategoryRepo.save(productCategory);\r\n\r\n    if (!productCategory) {\r\n      return new ErrorResponse(\r\n        \"Product category creation failed\",\r\n        \"Product Category Creation Error\",\r\n      500);\r\n    }\r\n\r\n    return new SuccessResponse(\r\n      \"Product category created successfully\",\r\n      201);\r\n\r\n  }\r\n\r\n  async findAll(): Promise<DataResponse<ProductCategory[]> | ErrorResponse> {\r\n    const productCategories = await this.productCategoryRepo.find();\r\n    \r\n    if (!productCategories || productCategories.length === 0) {\r\n      return new ErrorResponse(\r\n        \"No product categories found\",\r\n        \"Product Category Retrieval Error\",\r\n      404);\r\n    }\r\n\r\n    return new DataResponse(\r\n      productCategories,\r\n      \"Product Categories\",\r\n      200\r\n    );\r\n  }\r\n\r\n  async findOne(id: string): Promise<DataResponse<ProductCategory> | ErrorResponse> {\r\n    const productCategory = await this.productCategoryRepo.findOne({ where: { id } });\r\n    \r\n    if (!productCategory) {\r\n      return new ErrorResponse(\r\n        \"Product category not found\",\r\n        \"Product Category Retrieval Error\",\r\n      404);\r\n    }\r\n\r\n    return new DataResponse(\r\n      productCategory,\r\n      \"Product Category\",\r\n      200\r\n    );\r\n  }\r\n\r\n  async update(id: string, updateProductCategoryDto: UpdateProductCategoryDto) {\r\n    const productCategory = await this.productCategoryRepo.findOne({ where: { id } });\r\n\r\n    if (!productCategory) {\r\n      return new ErrorResponse(\r\n        \"Product category not found\",\r\n        \"Product Category Update Error\",\r\n      404);\r\n    }\r\n\r\n    const savedUpdate = await this.productCategoryRepo.update(id, updateProductCategoryDto);\r\n\r\n    if (!savedUpdate) {\r\n      return new ErrorResponse(\r\n        \"Product category update failed\",\r\n        \"Product Category Update Error\",\r\n      500);\r\n    }\r\n    \r\n    const updatedProductCategory = await this.productCategoryRepo.findOne({ where: { id } });\r\n\r\n    return new DataResponse(\r\n      updatedProductCategory,\r\n      \"Product Category Updated Successfully\",\r\n      200\r\n    );\r\n\r\n  }\r\n\r\n  async remove(id: string): Promise<SuccessResponse | ErrorResponse> {\r\n    const productCategory = await this.productCategoryRepo.findOne({ where: { id } });\r\n\r\n    if (!productCategory) {\r\n      return new ErrorResponse(\r\n        \"Product category not found\",\r\n        \"Product Category Deletion Error\",\r\n      404);\r\n    }\r\n\r\n    await this.productCategoryRepo.delete(id);\r\n\r\n    const deletedProductCategory = await this.productCategoryRepo.findOne({ where: { id } });\r\n    \r\n    if (deletedProductCategory) {\r\n      return new ErrorResponse(\r\n        \"Product category deletion failed\",\r\n        \"Product Category Deletion Error\",\r\n      500);\r\n    }\r\n\r\n    return new SuccessResponse(\r\n      \"Product category deleted successfully\",\r\n      200\r\n    );\r\n  }\r\n\r\n  async activate(id: string): Promise<SuccessResponse | ErrorResponse> {\r\n    const productCategory = await this.productCategoryRepo.findOne({ where: { id } });\r\n\r\n    if (!productCategory) {\r\n      return new ErrorResponse(\r\n        \"Product category not found\",\r\n        \"Product Category Activation Error\",\r\n      404);\r\n    }\r\n\r\n    productCategory.isActive = true;\r\n    await this.productCategoryRepo.save(productCategory);\r\n\r\n    return new SuccessResponse(\r\n      \"Product category activated successfully\",\r\n      200\r\n    );\r\n  }\r\n\r\n  async deactivate(id: string): Promise<SuccessResponse | ErrorResponse> {\r\n    const productCategory = await this.productCategoryRepo.findOne({ where: { id } });\r\n\r\n    if (!productCategory) {\r\n      return new ErrorResponse(\r\n        \"Product category not found\",\r\n        \"Product Category Deactivation Error\",\r\n      404);\r\n    }\r\n\r\n    productCategory.isActive = false;\r\n    await this.productCategoryRepo.save(productCategory);\r\n\r\n    return new SuccessResponse(\r\n      \"Product category deactivated successfully\",\r\n      200\r\n    );\r\n  }\r\n\r\n}\r\n"
        }
    ]
}