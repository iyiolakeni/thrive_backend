{
    "sourceFile": "src/business/business.controller.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1749910701547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749912492128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n @ApiTags(\"Business Details\")\r\n export class BusinessController {\r\n \tconstructor(private readonly businessService: BusinessService) {}\r\n \r\n-\t@Post()\r\n+\t@Post(\"create\")\r\n \tasync create(\r\n \t\t@Body() createbusinessDto: CreateBusinessDto\r\n \t): Promise<SuccessResponse | NotFoundResponse | InvalidCredentialsResponse> {\r\n \t\ttry {\r\n@@ -42,9 +42,9 @@\n \t\t\tthrow error;\r\n \t\t}\r\n \t}\r\n \r\n-\t@Get()\r\n+\t@Get(\"all\")\r\n \tgetAllBusiness(): Promise<Business[]> {\r\n \t\treturn this.businessService.getAllBusiness();\r\n \t}\r\n \r\n"
                },
                {
                    "date": 1749921191495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n import { CreateBusinessDto } from \"./dto/create-business.dto/create-business.dto\";\r\n import { Business } from \"src/entities/business.entity/business.entity\";\r\n import { UpdateBusinessDto } from \"./dto/update-business.dto/update-business.dto\";\r\n import {\r\n+\tDataResponse,\r\n \tInvalidCredentialsResponse,\r\n \tNotFoundResponse,\r\n \tSuccessResponse,\r\n } from \"src/models/response.dto\";\r\n@@ -43,16 +44,16 @@\n \t\t}\r\n \t}\r\n \r\n \t@Get(\"all\")\r\n-\tgetAllBusiness(): Promise<Business[]> {\r\n+\tgetAllBusiness(): Promise<DataResponse<Business[]>> {\r\n \t\treturn this.businessService.getAllBusiness();\r\n \t}\r\n \r\n \t@Get(\":businessName\")\r\n \tasync getBusinessDetails(\r\n \t\t@Param(\"businessName\") businessName: string\r\n-\t): Promise<Business> {\r\n+\t): Promise<DataResponse<Business> | NotFoundResponse> {\r\n \t\treturn this.businessService.getBusiness(businessName);\r\n \t}\r\n \r\n \t@Patch(\":businessName\")\r\n@@ -68,5 +69,27 @@\n \t\t@Param(\"businessName\") businessName: string\r\n \t): Promise<void> {\r\n \t\treturn this.businessService.deleteBusiness(businessName);\r\n \t}\r\n+\r\n+\t@Patch(\"verify-business/:id\")\r\n+\tasync verifyBusiness(\r\n+\t\t@Param(\"id\") id: string,\r\n+\t): Promise<SuccessResponse | NotFoundResponse> {\r\n+\t\treturn this.businessService.verifyBusiness(id);\r\n+\t}\r\n+\r\n+\t@Patch(\"activate-business/:id\")\r\n+\tasync activateBusiness(\r\n+\t\t@Param(\"id\") id: string\r\n+\t): Promise<SuccessResponse | NotFoundResponse> {\r\n+\t\treturn this.businessService.activateBusiness(id);\r\n+\t}\r\n+\r\n+\t@Patch(\"deactivate-business/:id\")\r\n+\tasync deactivateBusiness(\r\n+\t\t@Param(\"id\") id: string\r\n+\t): Promise<SuccessResponse | NotFoundResponse> {\r\n+\t\treturn this.businessService.deactivateBusiness(id);\r\n+\t}\r\n+\r\n }\r\n"
                }
            ],
            "date": 1749910701547,
            "name": "Commit-0",
            "content": "import { Body, ConflictException, Controller, Delete, Get, HttpException, HttpStatus, Param, Patch, Post } from '@nestjs/common';\r\nimport { ApiTags } from '@nestjs/swagger';\r\nimport { BusinessService } from './business.service';\r\nimport { CreateBusinessDto } from './dto/create-business.dto/create-business.dto';\r\nimport { Business } from 'src/entities/business.entity/business.entity';\r\nimport { UpdateBusinessDto } from './dto/update-business.dto/update-business.dto';\r\nimport { InvalidCredentialsResponse, NotFoundResponse, SuccessResponse } from 'src/models/response.dto';\r\n\r\n@Controller('Business')\r\n@ApiTags('Business Details')\r\nexport class BusinessController {\r\n    constructor(\r\n        private readonly businessService: BusinessService\r\n    ){}\r\n\r\n    @Post()\r\n    async create(@Body() createbusinessDto: CreateBusinessDto): Promise<SuccessResponse | NotFoundResponse | InvalidCredentialsResponse>{\r\n        try{\r\n            return this.businessService.create(createbusinessDto);\r\n        }\r\n        catch(error){\r\n            if(error instanceof ConflictException){\r\n                throw new HttpException('Business Already Exist, try another or reset details', HttpStatus.CONFLICT);\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    @Get()\r\n    getAllBusiness(): Promise<Business[]>{\r\n        return this.businessService.getAllBusiness();\r\n    }\r\n\r\n    @Get(':businessName')\r\n    async getBusinessDetails(@Param('businessName') businessName:string): Promise<Business>{\r\n        return this.businessService.getBusiness(businessName);\r\n    }\r\n\r\n    @Patch(':businessName')\r\n    async updateBusiness(@Param('businessName') businessName:string, @Body() updateBusinessDto: UpdateBusinessDto): Promise<Business>{\r\n        return this.businessService.updateBusiness(businessName, updateBusinessDto)\r\n    }\r\n\r\n    @Delete(':businessName')\r\n    async deleteBusiness(@Param('businessName') businessName:string): Promise<void>{\r\n        return this.businessService.deleteBusiness(businessName);\r\n    }\r\n}\r\n"
        }
    ]
}