{
    "sourceFile": "src/logger/logger.module.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1749726024154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749726288092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,11 @@\n \t\tWinstonModule.forRootAsync({\r\n \t\t\timports: [ConfigModule],\r\n \t\t\tinject: [ConfigService],\r\n \t\t\tuseFactory: (configService: ConfigService) => {\r\n-\t\t\t\tconst isProduction = configService.get(\"NODE_ENV\") === \"production\";\r\n+                const isProduction = configService.get(\"NODE_ENV\") === \"production\";\r\n+                \r\n+                console.log(\"LoggerModule is running in\", isProduction ? \"production\" : \"development\", \"mode\");\r\n \r\n \t\t\t\t// Base transports - always use console\r\n \t\t\t\tconst transports: winston.transport[] = [\r\n \t\t\t\t\tnew winston.transports.Console({\r\n"
                }
            ],
            "date": 1749726024154,
            "name": "Commit-0",
            "content": "// src/logger/logger.module.ts\r\nimport { Module } from \"@nestjs/common\";\r\nimport {\r\n\tWinstonModule,\r\n\tutilities as nestWinstonModuleUtilities,\r\n} from \"nest-winston\";\r\nimport * as winston from \"winston\";\r\nimport * as DailyRotateFile from \"winston-daily-rotate-file\";\r\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\r\n\r\n@Module({\r\n\timports: [\r\n\t\tWinstonModule.forRootAsync({\r\n\t\t\timports: [ConfigModule],\r\n\t\t\tinject: [ConfigService],\r\n\t\t\tuseFactory: (configService: ConfigService) => {\r\n\t\t\t\tconst isProduction = configService.get(\"NODE_ENV\") === \"production\";\r\n\r\n\t\t\t\t// Base transports - always use console\r\n\t\t\t\tconst transports: winston.transport[] = [\r\n\t\t\t\t\tnew winston.transports.Console({\r\n\t\t\t\t\t\tformat: winston.format.combine(\r\n\t\t\t\t\t\t\twinston.format.timestamp(),\r\n\t\t\t\t\t\t\tnestWinstonModuleUtilities.format.nestLike(\"Thrive\", {\r\n\t\t\t\t\t\t\t\tcolors: !isProduction,\r\n\t\t\t\t\t\t\t\tprettyPrint: !isProduction,\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t}),\r\n\t\t\t\t];\r\n\r\n\t\t\t\t// Add file transport in production\r\n\t\t\t\tif (isProduction) {\r\n\t\t\t\t\ttransports.push(\r\n\t\t\t\t\t\tnew DailyRotateFile({\r\n\t\t\t\t\t\t\tdirname: \"logs\",\r\n\t\t\t\t\t\t\tfilename: \"application-%DATE%.log\",\r\n\t\t\t\t\t\t\tdatePattern: \"YYYY-MM-DD\",\r\n\t\t\t\t\t\t\tzippedArchive: true,\r\n\t\t\t\t\t\t\tmaxSize: \"20m\",\r\n\t\t\t\t\t\t\tmaxFiles: \"14d\",\r\n\t\t\t\t\t\t\tformat: winston.format.combine(\r\n\t\t\t\t\t\t\t\twinston.format.timestamp(),\r\n\t\t\t\t\t\t\t\twinston.format.json()\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\tlevel: \"info\",\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t// Separate file for errors\r\n\t\t\t\t\t\tnew DailyRotateFile({\r\n\t\t\t\t\t\t\tdirname: \"logs\",\r\n\t\t\t\t\t\t\tfilename: \"error-%DATE%.log\",\r\n\t\t\t\t\t\t\tdatePattern: \"YYYY-MM-DD\",\r\n\t\t\t\t\t\t\tzippedArchive: true,\r\n\t\t\t\t\t\t\tmaxSize: \"20m\",\r\n\t\t\t\t\t\t\tmaxFiles: \"14d\",\r\n\t\t\t\t\t\t\tformat: winston.format.combine(\r\n\t\t\t\t\t\t\t\twinston.format.timestamp(),\r\n\t\t\t\t\t\t\t\twinston.format.json()\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\tlevel: \"error\",\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\ttransports,\r\n\t\t\t\t\t// Optional: customize log levels\r\n\t\t\t\t\tlevels: winston.config.npm.levels,\r\n\t\t\t\t\tlevel: isProduction ? \"info\" : \"debug\",\r\n\t\t\t\t\t// Handle uncaught exceptions\r\n\t\t\t\t\texceptionHandlers: [\r\n\t\t\t\t\t\tnew winston.transports.Console(),\r\n\t\t\t\t\t\t...(!isProduction\r\n\t\t\t\t\t\t\t? []\r\n\t\t\t\t\t\t\t: [\r\n\t\t\t\t\t\t\t\t\tnew winston.transports.File({\r\n\t\t\t\t\t\t\t\t\t\tfilename: \"logs/exceptions.log\",\r\n\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t  ]),\r\n\t\t\t\t\t],\r\n\t\t\t\t\texitOnError: false,\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\t}),\r\n\t],\r\n\texports: [WinstonModule],\r\n})\r\nexport class LoggerModule {}\r\n"
        }
    ]
}